## Workflow derived from https://github.com/r-lib/actions/tree/v2/examples and
##   https://github.com/yihui/crandalf/blob/main/.github/workflows/rev-check.yaml
##
## Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
name: 'revdeps-check'
description: 'Action to run reverse dependency checks for R packages'
author: 'Alex Chubaty'
inputs:
  quiet:
    description: "Logical. Suppress output from internal processes?"
    required: true
    default: true
  timeout:
    description: "Integer. Maximum time to wait (in minutes) for R CMD check to complete per revdep."
    required: true
    default: 30
runs:
  using: "composite"
  steps:
      - name: Install additional package dependencies
        ## install pkgs separately; keep this order to avoid conflicts
        run: |
          cat("::group::Install 'revdepchecks' and related packages\n")
          pak::pkg_install("fs")
          pak::pkg_install("HenrikBengtsson/revdepcheck.extras")
          pak::pkg_install("r-lib/revdepcheck")
          pak::pkg_install("achubaty/crancache@r-universe")
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Record crancache info
        id: crancache-info
        run: |
          cat("::group::Record crancache info\n")
          echo "R_CRANCACHE=$(Rscript -e 'cat(crancache::get_cache_dir())')" >> "$GITHUB_OUTPUT"
          echo "R_VERSION=$(Rscript -e 'cat(as.character(getRversion()))')" >> "$GITHUB_OUTPUT"
          cat("::endgroup::\n")
        shell: bash

      - name: Restore the crancache
        id: crancache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.crancache-info.outputs.R_CRANCACHE }}
          key: ${{ runner.os }}-R${{ steps.crancache-info.outputs.R_VERSION }}-crancache

      - name: Populate the crancache
        id: crancache-populate
        ## manual pre-installation uses crancache:
        ## 1. update all packages in the crancache to their latest versions;
        ## 2. ensure dependency packages for revdeps are installed and cached;
        ## 3. sequentially installs deps of each revdeps package in parallel
        ##    (NOTE: PE pkgs aren't crancached, and will be installed each time);
        run: |
          cat("::group::Identify revdeps\n")
          options(revdepcheck.num_workers = getOption("Ncpus", 4L))

          omit_pkgs <- c(
            "SpaDES.project" ## omit b/c it circularly Suggests SpaDES.config
          )
          revdeps <- c(
            revdepcheck.extras::revdep_children(),
            revdepcheck.extras::revdep_grandchildren()
          ) |>
            setdiff(omit_pkgs)
          cat("::endgroup::\n")

          cat("::group::Update packages in the crancache\n")
          crancache::update_packages(lib.loc = .libPaths()[1], ask = FALSE)
          cat("::endgroup::\n")

          cat("::group::Pre-populate the crancache (no-install)\n")
          revdepcheck.extras::revdep_precache(pkgs = revdeps)
          cat("::endgroup::\n")

          cat("::group::Install revdeps packages' dependencies\n")
          if (Sys.info()[["sysname"]] == "Darwin") {
            fs::path("revdep", "library.noindex", revdeps) |> fs::dir_create()
          } else {
            fs::path("revdep", "library", revdeps) |> fs::dir_create()
          }
          try(lapply(revdeps, revdepcheck:::deps_install, pkgdir = "."))
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Check reverse dependencies
        id: revdeps-check
        run: |
          cat("::group::Identify revdeps\n")
          options(revdepcheck.num_workers = getOption("Ncpus", 4L))

          omit_pkgs <- c(
            "SpaDES.project" ## omit b/c it circularly Suggests SpaDES.config
          )
          revdeps <- c(
            revdepcheck.extras::revdep_children(),
            revdepcheck.extras::revdep_grandchildren()
          ) |>
            setdiff(omit_pkgs)
          cat("::endgroup::\n")

          cat("::group::Setup revdeps checks\n")
          revdepcheck.extras::revdep_init()
          revdepcheck::revdep_add(packages = revdeps)
          cat("::endgroup::\n")

          cat("::group::Run revdeps checks\n")
          revdepcheck::revdep_check(
            num_workers = 4L,
            quiet = as.logical("${{ inputs.quiet }}"),
            timeout = as.difftime("${{ inputs.timeout }}", units = "mins")
          )
          cat("::endgroup::\n")

          cat("::group::Save revdeps check reports\n")
          revdepcheck::revdep_report(all = TRUE)
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Report issues with reverse dependencies
        id: revdeps-report
        run: |
          echo "$(Rscript -e 'revdepcheck::revdep_report_summary()')" >> "$GITHUB_STEP_SUMMARY"

          echo "::group::Reverse dependency failures"
          echo "$(cat revdep/failures.md)"
          echo "::endgroup::"

          echo "::group::Reverse dependency problems"
          echo "$(cat revdep/problems.md)"
          echo "::endgroup::"
        shell: bash

      - name: Upload check results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ runner.os }}-revdeps-check-results
          if-no-files-found: ignore
          path: |
            00check_diffs.html
            latex.txt
            recheck
            recheck2
            *.Rcheck
            *.Rcheck2

      - name: Save crancache
        id: crancache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.crancache-info.outputs.R_CRANCACHE }}
          key: ${{ steps.crancache-restore.outputs.cache-primary-key }}
